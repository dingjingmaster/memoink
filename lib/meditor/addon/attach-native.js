"use strict";import "../../layer/index.js";importCss("/css/meditor__attach.css");const $doc=Anot(document),LANGUAGES={zh:{IMAGE:{REMOTE:"远程图片",LOCAL:"本地上传",MANAGE:"图片管理",ALT:"图片描述",ADDRESS:"图片地址"},FILE:{REMOTE:"远程附件",LOCAL:"本地上传",MANAGE:"附件管理",ALT:"附件描述",ADDRESS:"附件地址"},BTN:"确定",INSERT:"插入",CHOOSE:"选择文件",LIMIT:"上传大小限制:单文件最大 ",SCREENSHOT:"截图",COMPRESS:"截图处理中...",TABLE:{NAME:"文件名",PROGRESS:"上传进度",HANDLE:"操作"},ERROR:{TYPE:"文件类型错误",SIZE:"文件体积过大",EMPTY:"描述和地址不能为空",UNDEFINED:"在node-webkit中saveAttach回调必须定义"}},en:{IMAGE:{REMOTE:"Remote image",LOCAL:"Local image",MANAGE:"Manage",ALT:"Image alt text",ADDRESS:"Image address"},FILE:{REMOTE:"Remote file",LOCAL:"Local file",MANAGE:"Manage",ALT:"File alt text",ADDRESS:"File address"},BTN:"OK",INSERT:"insert",CHOOSE:"Choose file",LIMIT:"Size of upload file limit to ",SCREENSHOT:"screenshot",COMPRESS:"Screenshot compressing...",TABLE:{NAME:"name",PROGRESS:"progress",HANDLE:"handle"},ERROR:{TYPE:"Forbidden type",SIZE:"Too large",EMPTY:"Alt text and address can not be null",UNDEFINED:"Function saveAttach is not defined"}}};LANGUAGES["zh-CN"]=LANGUAGES.zh,LANGUAGES["zh-TW"]=LANGUAGES.zh;const lang=LANGUAGES[window.__ENV_LANG__||navigator.language]||LANGUAGES.en,fixCont=function(t,e){let a=!1;return t.props.uploadSizeLimit&&(a=(t.props.uploadSizeLimit/1048576).toFixed(2)),`\n  <dl class="do-meditor-attach">\n    <dt class="tab-box" :drag="do-layer" data-limit="window">\n      <span class="item" :class="active:tab === 1" :click="switchTab(1)">\n        ${lang[e].REMOTE}\n      </span>\n      <span class="item" :class="active:tab === 2" :click="switchTab(2)">\n        ${lang[e].LOCAL}\n      </span>\n      <span class="item" :class="active:tab === 3" :click="switchTab(3)">\n        ${lang[e].MANAGE}\n      </span>\n    </dt>\n    <dd class="cont-box">\n      <div class="remote" :visible="tab === 1">\n        <section class="section do-fn-cl">\n          <input \n            class="do-meditor__input" \n            :duplex="attachAlt" \n            placeholder="${lang[e].ALT}" />\n        </section>\n        <section class="section do-fn-cl">\n          <input \n            class="do-meditor__input" \n            :duplex="attach" \n            placeholder="${lang[e].ADDRESS}" />\n        </section>\n        <section class="section do-fn-cl">\n          <a \n            href="javascript:;" \n            class="do-meditor__button submit" \n            :click="confirm">${lang.BTN}</a>\n        </section>\n      </div>\n      <div class="local" :visible="tab === 2">\n        <div class="select-file">\n          <input ref="attach" multiple :change="change" type="file" class="hide" />\n          <span class="file" :click="select">${lang.CHOOSE}</span>\n          ${a?`<span class="tips">(${lang.LIMIT+a} MB)</span>`:""}\n        </div>\n        <ul class="upload-box">\n          <li class="thead">\n            <span class="col">${lang.TABLE.NAME}</span>\n            <span class="col">${lang.TABLE.PROGRESS}</span>\n            <span class="col">${lang.TABLE.HANDLE}</span>\n          </li>\n          <li class="tbody">\n            <p :for="uploadQueue">\n              <span \n                class="col do-fn-ell" \n                :text="el.name" \n                :layer-tips="el.name"></span>\n              <span class="col" :html="el.progress"></span>\n              <span class="col"><a class="insert" :click="insert(el)">${lang.INSERT}</a></span>\n            </p>\n          </li>\n        </ul>\n      </div>\n      <div class="manager" :visible="tab === 3">\n        <ul class="list-box">\n          <li \n            class="item" \n            :for="attachList"\n            :layer-tips="el.name"\n            :click="insert(el)">\n\n            <span class="thumb" :html="el.thumb"></span>\n            <p class="name" :text="el.name"></p>\n          </li>\n        </ul>\n        \n      </div>\n    </dd>\n  </dl>`};function uploadFile(t,e){for(let a of this.files){let n=a.name.slice(a.name.lastIndexOf("."));if("IMAGE"===e&&!/^\.(jpg|jpeg|png|gif|bmp|webp|ico)$/.test(n)){this.uploadQueue.push({name:a.name,progress:'<span class="red">0%('+lang.ERROR.TYPE+")</span>",url:""});continue}if(t.props.uploadSizeLimit&&a.size>t.props.uploadSizeLimit){this.uploadQueue.push({name:a.name,progress:'<span class="red">0%('+lang.ERROR.SIZE+")</span>",url:""});continue}let s=(new Date).format("YmdHis")+n,l={name:a.name,fixName:s,progress:"100%",url:""};t.props.saveAttach?t.props.saveAttach(l,a).then(t=>{l.url=t,this.uploadQueue.push(l)}).catch(t=>{Anot.error(t)}):layer.toast(lang.ERROR.UNDEFINED,"error")}}function uploadScreenshot(t,e){let a={name:(new Date).format("YmdHis")+".jpg",url:""};t.props.saveAttach?t.props.saveAttach(a,e).then(e=>{t.insert(`![${lang.SCREENSHOT}](${e})`)}).catch(t=>{Anot.error(t)}):layer.toast(lang.ERROR.UNDEFINED,"error")}function showDialog(t,e,a){let n=Anot(t).offset();layer.open({type:7,menubar:!1,fixed:!0,maskClose:!0,offset:[n.top+35-$doc.scrollTop()],shift:{top:n.top-$doc.scrollTop()},tab:2,attach:"",attachAlt:"",uploadQueue:[],attachList:[],switchTab(t){this.tab=t,3===t&&(this.attachList.clear(),e.props.getAttachList&&e.props.getAttachList(a).then(t=>(t.forEach(t=>{let e=t.name.slice(t.name.lastIndexOf("."));t.isImage=/^\.(jpg|jpeg|png|gif|bmp|webp|ico)$/.test(e),t.thumb=t.isImage?`<img src="${t.url}" />`:'<em class="do-icon-txt"></em>'}),t)).then(t=>{t=t.filter(t=>"IMAGE"!==a||t.isImage),this.attachList=t}))},select(){let t=document.createEvent("MouseEvent");t.initEvent("click",!1,!1),this.$refs.attach.dispatchEvent(t)},change(t){this.files=t.target.files,uploadFile.call(this,e,a)},insert:function(t){if(!t.url)return;let n=`\n${"IMAGE"===a?"!":""}[${t.name}](${t.url})`;e.insert(n)},confirm:function(){if(!this.attach||!this.attachAlt)return layer.toast(lang.ERROR.EMPTY,"error");let t=`\n${"IMAGE"===a?"!":""}[${this.attachAlt}](${this.attach})`;e.insert(t),this.close()},content:fixCont(e,a)})}const plugin={__init__(t){Object.assign(t.vm.addon,{attach(t){showDialog(t,this,"FILE")},image(t){showDialog(t,this,"IMAGE")}}),t.vm.$refs.editor.addEventListener("paste",function(e){if(e.preventDefault(),!e.clipboardData.getData("text/plain")&&e.clipboardData.items){let a=e.clipboardData.items,n=(a.length,null);for(let t of a)t.type.indexOf("image")>-1&&(n=t.getAsFile());if(null!==n){layer.toast(lang.COMPRESS);let e=new FileReader;e.onload=function(){let e=document.createElement("img"),a=document.createElement("canvas");e.onload=function(){a.width=e.width,a.height=e.height;let n=a.getContext("2d");n.clearRect(0,0,a.width,a.height),n.drawImage(this,0,0,a.width,a.height),a.toBlob(e=>{uploadScreenshot(t.vm,e)},"image/jpeg",.8)},e.src=this.result},e.readAsDataURL(n)}}})}};export default plugin;